/*
 * @lc app=leetcode.cn id=5 lang=javascript
 *
 * [5] 最长回文子串
 */
/**
 * @param {string} s
 * @return {string}
 */
var longestPalindrome = function(s) {
    // 解法1: 两端加，深度优先遍历 最大为 n^2
    if (s.length === 0) {
        return '';
    }
    let res = '';
    for (let i = 0; i < s.length - res.length / 2; i++) {
        let t = 1;
        // 3, 5, 7...
        while (i - t >= 0 && i + t < s.length && s[i - t] === s[i + t]) {
            t += 1;
        }
        // 最终的t是不满足的，需要-1 才是 最大的，之后加上 i就是全长
        if (t * 2 - 1 > res.length) {
            res = s.slice(i - t + 1, i + t); // 注意包含 i + t - 1
        }
        // 2, 4, 6...
        t = 1;
        while(i - t + 1 >= 0 && i + t < s.length && s[i - t + 1] === s[i + t]) {
            t += 1;
        }
        // 最终的t是不满足的，需要-1 才是 最大的
        if (t * 2 - 2 > res.length) {
            res = s.slice(i - t + 2, i + t); // 注意包含 i + t - 1
        }
    }
    return res;
};

// console.log(longestPalindrome('cbbd'));
// console.log(longestPalindrome

